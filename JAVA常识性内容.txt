1.Java程序执行的步骤：
Java源代码(.java) --->用Javac进行编译 --->JVM文件(.class)  --->Java解释器--->运行

2.java文件名应与类名一致

3.关键字：java的特殊字符；         标识符：用户自定义的命名
标识符命名规则：只能用大小写英文、数字、美元符号（＄）和下划线（_），而且以不能数字开头，也不能用关键字。

4.数据类型包括：
基本数据类型：
（1）整数型：byte short int（默认） long
（2）浮点型：float double（默认）
（3）字符型：char
（4）布尔型：boolean
引用数据类型：
数组、字符串、类、接口等

5.使用变量的注意事项：
（1）先定义再引用，未赋值也不可引用，只能在作用域内引用。（作用域：从定义的一行起，到直接大括号 } 为止）
（2）赋值号右边的数值不能超过左边数值类型的数值范围。
（3）float和long不要忘了在数值后面加上F和L。
（4）可同时定义并初始化多个同类型的变量。

6.数据类型转换：
自动类型转换：
（1）自动完成；
（2）数值范围从小到大。
强制类型转换： 
（1）需要用固定格式： （目标数据类型）待转换的数值；例：（int）100L；
（2）数值范围从大到小，可能会发生精度损失和数据溢出，使用时需要谨慎。
注意事项：
（1）byte/short/char可以用来进行数学运算，且在运算时会先将其数据类型提升为int类型，故运算结果也为int类型。
（2）boolean类型不能发生数据类型转换。

7.数字和字符的对照关系表（编码表）
（1）ASCII码表 ：American Standard Code for Information Interchange
（2）Unicode码表：万国码。

8.在数学运算中，一旦运算中有不同类型的数据，那么结果将是数值范围大的数据类型。  

9.“+”对字符串是连接字符，字符串+任何数据类型，都是将其连接成为字符串。例： "abc"+ "efg"="abcefg"。

10.复合赋值运算符带有强制类型转换。例：byte num=30；num+=5； num还是byte类型。

11.三元运算符
格式： 数据类型 变量名称 = 条件判断 ？表达式A : 表达式B
注意事项：
（1）必须同时保证表达式A和表达式B都符合左侧数据类型的要求
（2）三元运算符的结果必须被使用。

12.脚本工具：jshell    ;IDE: eclipse   ；IntelliJ IDEA

13.右侧数据类型数值范围大于左侧时，对变量进行赋值：
（1）如果右侧数值没有超过左侧数据类型范围，编译器会完成强制类型转换，不会报错；如若超过了，编译器报错。
（2）如果右侧表达式只有常量且结果数值没有超过左侧数据类型范围，在编译时就完成表达式计算并对变量赋值，若有变量则报错。

14.switch（）语句小括号中只能是以下数据类型：
基本数据类型：byte/short/char/int
引用数据类型：String字符串、enum枚举

15.循环语句的组成：
（1）初始化语句
（2）判断语句（布尔表达式）
（3）循环体
（4）步进表达式

16.方法的三种调用格式：
（1）单独调用： 方法名称（参数）；
（2）打印调用：System.out.println(方法名称（参数）)；
（3）赋值调用：数据类型  变量名称 = 方法名称（参数）。
对无返回值的方法只能单独调用。

17.使用方法的注意事项：
（1）方法应该定义在类当中，不能嵌套的定义方法；
（2）如果方法有返回值，那么必须写上“return 返回值；”，不能没有；

18.判断方法重载的依据：
（1）必须在同一个类中；
（2）方法名相同；
（3）方法参数的个数、顺序或类型不同；
（4）与方法的修饰符、返回值或参数名称没有关系。

19.数组定义格式-初始化：
（1）动态初始化(指定长度)格式：数据类型[] 数组名称 = new 数组类型 [数组长度]；
（2）静态初始化(指定内容)格式：Ⅰ.数据类型[] 数组名称 = new 数组类型 []{元素1，元素2，...} 
                                                  Ⅱ.省略格式：数据类型[] 数组名称 = {元素1，元素2，...}；省略格式不能拆分成两个步骤；

20.动态初始化数组的默认值：
（1）如果是整数型，那么默认为0；
（2）如果是浮点型，那么默认为0.0；
（3）如果是字符型，那么默认为'\u0000';
（4）如果是布尔类型，那么默认为false；
（5）如果是引用类型，那么默认为null；

21.java内存分区：
（1）栈（Stack）：用于 存放局部变量，提供 方法的执行 的内存；
（2）堆（Heap）：用于存放 new出来的东西，每个元素都有默认值；
（3）方法区（Meathon Area）：用于存放 方法 和 .class 的相关文件；
（4）本地方法区
（5）寄存器

22.数组在内存中的存放与操作流程：
（1）在执行某个方法时，会为其在栈中开辟一块区域。
（2）数组名称作为一个局部变量存放在栈中，它的值是实际数组在堆中的地址（十六进制），实际的数组是在堆中开辟一块区域；
（3）数组名称存放的地址就是数组第一个元素的地址所在；
（4）对数组的操作都是通过 在栈中的地址 访问 堆中的数组来进行；
（5）数组一旦创建，在程序的执行过程中，它的长度是不可改变的。

23.数组作为方法调用的参数或返回值时传递的都是地址值。（疑惑：获取了地址值之后如何确定数组长度呢?）
