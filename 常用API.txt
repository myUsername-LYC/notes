1.API定义：API(Application Programming Interface)，应用程序编程接口

2.引用类型的使用需要：（1）导包 --->（2）创建 --->（3）使用  
（1）导包格式：import 包路径.类名 （类与Java文件在同一个包
下时不用写；包路径为Java.lang时不用写）
（2）创建格式：类名 对象名 = new 类名（）；
（3）使用格式：对象名.成员方法名（）；

3.匿名对象
创建格式：new 类名（）；
使用格式：new 类名（).成员变量名/成员方法名；   
（1）匿名对象只能使用唯一的一次，如果确定有一个对象只用一次
就可以使用匿名对象
（2）匿名对象可以作为参数传进方法，也可以作为返回值由方法传回。

4.Random.nextInt(n) ---> 随机数的范围是[0,n)。

5.ArrayList基本用法：
（1）数组的长度创建后不可改变，而ArrayList可以随意改变；
（2）创建格式：ArrayList<E> 对象名 = new ArrayList<>();
E表示的是泛型，泛型是统一的一个引用类型，不能是基本类型；
（3）注意事项：对于ArrayList集合来说，直接打印得到的不是地址，
而是里面的内容，如内容是空，则打印[]；
（4）向集合添加数据需要用到add方法；

6.ArrayList的常用方法：
（1）public boolean add(E e)：向集合中添加元素，参数的类型
和泛型一致
（2）public E get(int index)：从集合当中获取元素，参数是索引
编号，返回值就是对应位置的元素
（3）public E remove(int index)：从集合当中删除元素，参数是
索引编号，返回值就是被删除的元素
（4）public int size()：获取集合的长度，返回值就是集合中包含
的元素个数。

7.将基本数据类型放入ArrayList需要用到对应的”包装类“：
基本类型              包装类
byte                       Byte
short                     Short
int                         Integer【特殊】
long                      Long
float                      Float
double                  Double
char                      Character【特殊】
boolean                Boolean
从JDK1.5开始，支持自动装箱、自动拆箱。
自动装箱：基本类型--->包装类型
自动拆箱：包装类型--->基本类型

8.Java中的所有的字符串都是对象，字符串有以下特点：
（1）字符串内容永不可改变
（2）因为其不可改变，所以字符串可以共享
（3）字符串效果上相当于char[]字符数组，但是底层原理是
byte[]字节数组

9.创建字符串有3+1总方法
三种构造方法：
（1）public String（）
（2）public String（char[] array）
（3）public String（byte[] array）
一种直接创建：
String str ="" 

10.在堆中存在一个字符串常量池，直接创建的字符串对象位于
该池中，使用构造方法创建的字符串对象不在常量池中，堆中
的字符串对象存储的是一个地址，地址指向堆中的一个byte[]字
节数组

11.用==进行比较，基本数据类型比较的是值，引用数据类型比较的是地址值

12.字符串的内容比较方法：
（1）public boolean equals（object obj）：参数可以是任何对象，只有参
数是字符串且其内容完全相同时（区分大小写）才会返回一个true
（2）public boolean equalsIgnoreCase（String str）：忽略大小写，进行
内容比较
注意事项：
①任何对象都能用object接受
②equals具有对称性，a.equals(b)与b.equals(a)意义相同
③为了避免空指针异常，推荐使用常量.equals(变量)，不推荐使用变量.eauals(常量)

13.字符串的常用方法：
（1）public int length()：获取字符串的长度
（2）public char charAt(int index)：返回字符串中指定索引值的字符
（3）public int indexOf(String str)：返回参数字符串在当前字符串中第一次
出现的索引值
（4）字符串拼接：public String concat(String str)：将当前字符串和参数字符串拼接成一个
新的字符串并返回
（5）字符串截取：①public String substring(int index)：截取并返回当前字符串从参数位置
                            到字符串末尾
                            ②public String substring（int index，int end）：截取从begin开始，一直
                            到end结束，中间的字符串
                            注意：区间为[begin,end)，左闭右开区间
（6）字符串转换：①public char[] toCharArray（）：将当前字符串产分为字符数组
                            ②public byte[] getBytes（）：获得当前字符串底层的字节数组
                            ③public String replace（charSequence oldString，charSequence newString）：
                            将所有出现的老字符串替换成新的字符串，返回替换之后的结果新字符串。
                             注意：charSequence可以接收字符串
（7）字符串分割：public String[] split(String regex)：按照参数的规则，将字符串切分成为若干个
                            子字符串，返回一个字符数组。
                            注意：split方法的参数其实是一个“正则表达式”，如果按照英文句点“.”进行切分
                            必须要写成"\\."（两个反斜杠）

14.static关键字：一旦用了static关键字，那么这样的内容不在属于对象自己，而是属于类的，凡是
本类的对象，都共享同一份。

15.static修饰成员变量是称为静态变量，修饰成员方法时称为静态方法，静态变量和静态方法都不属于
对象，而是属于类。
无论是静态变量还是静态方法都推荐使用类名称调用：
（1）如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用（对象名.成员方法/成员变量）
（2）如果有static关键字，那么不需要创建对象，直接就能通过类名称使用它（类名称.静态方法/静态变量）
，在本类中使用时可以不加类名称
注意事项：
①静态（方法）不能直接访问非静态（变量）  --->因为在内存中是【先】有的静态内容，【后】有的非静态内容
②静态方法当中不能使用this  --->因为this代表当前调用方法的对象，而调用静态方法不需要对象。

16.根据类名称访问静态成员变量，这个过程跟对象没有任何关系，只和类相关。

17.静态代码块
格式：public class 类名称{
                 static{
                静态代码块内容
                 }
           }
特点：①当第一次用到本类时，静态代码块执行唯一的一次
          ②静态内容总是优于非静态，所以静态代码块比构造方法先执行

18.Arrays类（与数组相关的工具类，提供了大量的静态方法来操作数组）：
（1）public static String tostring（数组）：将参数数组变为字符串（格式：[元素1，元素2，...]）
（2）public static void sort（数组）：将参数数组按升序排序；
注意事项：
①如果是数值，sort按照升序将参数数组排序
②如果是字符串，sort按照字母升序
③如果是自定义的类型，那么这个自定义的类需要有Comparable或者Comparator接口的支持。

19.Math类：（提供大量的静态方法来进行数学运算）：
（1）public static double abs（double num）：获取绝对值。有多种重载
（2）public static double ceil（double num）：向下取整。
（3）public static double floor（double num）：向下取整。
（4）public static long round（double num）：四舍五入。
（5）Math.PI代表近似的圆周率常量（都double）。

一、Object类
*Object类是根类，也是所有类的父类，里面提供了很多方法

1.toString(Object o)方法（默认方法位于Object类中）
（1）默认的toString（）方法就是直接打印对象的地址值
（2）直接打印对象其实就是调用对象的toString（）方法
（3）我们在定义一个类时，可以对toString方法进行覆盖重写。

2. equals(Object o)方法（默认方法位于Object类中）
（1）默认的equals（）方法是比较对象的地址值
（2）我们在定义一个类时，可以对equals（）方法进行覆盖重写
重写的方法体应该包括几个部分{
                                       ①判断是否是本身
		       ②判断是否为null及是否能向下转型为本类
                           	       ③判断属性内容是否相等
                                        }

3.Objects类中也有一个equals（Object a，Object b）方法：同样是比较两个对象
是否相同，但是加上了一些健壮性的判断，不会出现空指针异常。

二、Date类
*Date类表示特定的瞬间，精确到毫秒（1s=1000ms）
*时间原点（0毫秒）：1970 年 1 月 1 日    00:00:00 （英国格林威治），以时间原点为基准，可以将毫秒值
和日期相互转换，
*注意：中国属于东八区，时间原点为 1970 年 1 月 1 日    08:00:00.

1.Date类的空参数构造方法Date（）--->获取当前时间并以日期形式显示

2.Date类的带参构造方法Date（long date） --->传递毫秒值，并将毫秒值以日期形式显示

3.Date类的成员方法（）：
①getTime（）：把日期转换为毫秒（相当于System.currentTimeMills()），返回值类型为long
②String toLocaleString()：根据本地格式转换日期对象

4.Dateformat类（抽象类）：用于格式化(也就是日期->文本)、解析(文本->日期）
成员方法有：①String format（Date date）：按照指定的模式，把Date日期格式化为符合模式的字符串
	    ②Date parse（String source）：把符合模式的字符串，解析为Date日期
*抽象类无法直接使用，我们使用其子类SimpleDateFormat
SimpleDateFormat类的构造方法为：SimpleDateFormat(String pattarn) --->用给定的模式和默认语言环境
的日期格式符号构造 simpleDateFormat，参数：String pattern--->传递指定的模式
*模式：严格区分大小写：
	y	年		M	月
	d	日		H	时
	m	分		s	秒
注意：Date parse（String source）方法中声明了ParseException解析异常，调用一个抛出异常的方法
需要解决这个异常，要么throws继续生命抛出异常，要么try...catch自己处理异常。

三、Calendar类
*Calendar类可以操作很多日历字段，它是一个抽象类，不能直接使用，但是在Calendar类中的getInstance方法
返回值是一个Calendar对象，其日历字段已由当前日期和时间初始化：Calendar a = Calendar.getInstance();

1.public int get（int field）：返回给定日历字段的值  （int field ---> a.YEAR）

2.public void set（int field，int value）：将给定的日历字段设置为给定值。

3.public abstract void add（int field，int amout）：根据日历的规则，为给定日历字段添加或减去指定的时间量

4.public Date getTime（）：返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。

四、System类
1.System.currenrTimeMillis()：获取当前时间的毫秒值，返回值为long，常用于测试程序效率

2.System.arraycopy(Object src,int srcPos,Object dest,int destPos,int length)：将数组中指定的数据
拷贝到另一个目标数组
参数列表：             src ---> 源数组
                             srcPos---> 源数组中的起始位置
                             dest ---> 目标数组
	             destPos ---> 目标数据中的起始位置
	             length ---> 要复制的数组元素的数量

五、StringBuilder类
*字符串缓冲区，可以提高字符串的操作效率（看作一个长度可以变化的字符串），底层也是一个数组，但是没有被final
修师，可以改变长度，原始长度是16个字符，超出了会自动扩容。

1.构造方法：
（1）public StringBuilder（）：构造一个空的StringBuilder容器
（2）public StringBuilder（String str）：构造一个StringBuilder容器，并将字符串添加进去。

2.成员方法：
（1）public StringBuilder append（...）：添加任意类型数据的字符串形式，并返回当前对象
（2）public StringBuilder reverse（）：反转内容
（3）public String toString（）：将当前StringBuilder对象转换为String对象。

六、包装类
*为了基本数据类型能像对象一样操作，而定义了基本数据类型相对应的包装类。

1.装箱和拆箱：
装箱：
（1）构造方法：①Integer（int value）：构造一个新分配的Integer对象，它表示指定的int值
                         ②Integer（String s）：构造一个新分配的Integer对象，他表示String参数所指示的int值
（2）静态方法：①static Integer valueOf(int i)：返回一个表示指定的int 值得Integer实例
	         ②static Integer valueOf（String s）：返回保存指定String值的Integre对象。
拆箱：
（1）成员方法：int intValue（）以int类型返回该Integer的值
注意：jdk1.5之后可以进行自动装箱和自动拆箱。

2.基本数据类型和字符串之间的相互转换：
基本数据类型--->字符串有三种方法：
（1）基本数据类型+""   ：最简单的方式（常用）
（2）使用包装类中的静态方法  （例：static String.toString(int i)---> 返回一个表示指定整数的String对象）
（3）使用String类中的静态方法（例：static String valueOf(int i)--->返回int参数的字符串表示形式）
字符串--->基本数据类型：
使用包装类的静态方法parseXX（String s）；

