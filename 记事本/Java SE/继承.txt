1.继承要解决的问题主要是：减少编写重复的代码，便于维护和管理。

2.继承关系的特点：
（1）子类可以拥有父类的“内容”
（2）子类还可以拥有自己的专属“内容”

3.定义格式：
（1）父类的定义与普通的类定义一致
（2）子类定义：public class 子类名称 extends 父类名称

4.在继承关系中，子类可以看作一个父类，例如父类是员工，子类是讲师，那么“讲师就是一个员工”

5.在父子类的继承关系中，如果成员变量重名，则创建子类对象时，访问有两种方式：
（1）直接通过子类对象访问成员变量：等号左边是谁，就优先用谁，没有则向上找
（2）间接通过成员方法访问成员变量：该方法属于谁，就优先用谁，没有则向上找
总结起来就是：就近原则

6.区分重名的三种变量的访问：
（1）局部变量：                       直接写成员变量名
（2）本类的成员变量：             this.成员变量名
（3）父类的成员变量：             super.成员变量名

7.访问父子类中重名的成员方法时，new的是谁，就优先用谁的，没有则向上找。
口诀：成员变量：编译看左边，运行还看左边
          成员方法：编译看左边，运行看右边。

8.注意：无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。

9.（了解）当子类方法和父类方法的名称和参数一致时，会发生方法覆盖，方法覆盖重写的注意事项：
（1）必须保证父子类之间的方法名称相同，参数列表也相同；@override写在方法前面用来检测
是不是有效的覆盖重写
（2）子类方法的返回值必须【小于等于】父类方法的返回值范围
拓展：java.lang.Object类是所有类的公共最高父类（祖宗类）
（3）子类方法的权限必须【大于等于】父类方法的权限修饰符。
小拓展：public>protected>(default)>private    (default)不是关键字default,而是什么都不写。

10.继承关系中，父子类构造方法的访问特点：
（1）子类构造方法中有一个默认隐含的“super();”调用，所以一定是先调用的父类构造，后执行的子类构造
（2）子类构造可以通过super关键字来调用父类重载构造。
（3）super的父类构造调用，必须是子类构造方法的第一个语句，不能一个子类构造调用多次super构造
总结：子类构造必须调用super（），不写则调用默认的super（），一个子类构造中有且只有一个super（）
，还必须是子类构造的第一个语句。

11.super关键字（访问父类内容）的三种典型用法：
（1）在子类成员方法中访问父类的成员变量
（2）在子类成员方法中调用父类的成员方法
（3）在子类构造方法中调用父类的构造方法

12.this关键字（访问本类内容）的三种典型用法：
（1）在本类的成员方法中访问本类中的成员变量
（2）在本类的成员方法中调用本类的另一个成员方法
（3）在本类的构造方法中调用本类的另一个构造方法
在用法（3）中要注意：
①this（）和super（）特点相同，在构造方法中有且只有一个，还必须是构造方法中的第一个语句
②因为this（）和super（）相同的的特点，所以它们不能在一个构造方法中同时使用

13.Java语言中继承的三个特点：①单继承、②多级继承以及③一个子类只有一个直接父类，但是一个父类可以有多个子类

14.如果父类中的方法不确定如何进行{}方法体实现，那么这就应该是一个抽象方法

15.抽象类和抽象方法的定义格式：
（1）抽象类：在class前加上关键字abstract即可
（2）抽象方法：在返回值前加上关键字abstract，去掉方法体；
注意：抽象方法必须定义在抽象类之中，否则不能通过编译。

16.抽象类和抽象方法的使用：
（1）不能直接创建抽象类对象
（2）必须用一个子类来继承抽象父类
（3）子类必须覆盖重写抽象父类当中所有的抽象方法 --->覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体。
（4）创建子类对象使用

17.抽象类使用注意事项：
（1）抽象类中可以有构造方法，是供子类创建对象时，对父类成员进行初始化的。
（2）抽象类不一定包含抽象方法，但是有抽象方法的类必定是抽象类
（3）抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，无法通过编译，除非该子类也是抽象类。

18.在父子类关系中，创建的每个子类对象继承父类的成员变量，且是属于自己的，不是所有子类对象共享
一份父类的信息（共享的只有使用static关键词修饰的）。