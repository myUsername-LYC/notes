1.接口就是一种公共规范标准，在java中接口就是多个类的公共规范，接口是一种引用类型，
最重要的内容是其中的：抽象方法。
定义格式：public interface 接口名称{
                   //接口内容
                 }

2.Java 7 中接口可以包含的内容有：
（1）常量 （2）抽象方法
  Java 8 中接口可以额外包含
（3）默认方法 （4）静态方法
 Java 9 中接口可以额外包含
（5）私有方法

3.接口的使用步骤：
（1）接口不能直接创建使用，必须有一个“实现类”来“实现”该接口
实现类 格式：public class 实现类名称 implements 接口名称（）{ 
                               //...
                     }
（2）接口的实现类必须覆盖重写（实现）接口中所有的抽象方法
（3）创建实现类的对象，进行使用
注意：如果实现类没有对接口中所有的抽象方法进行覆盖重写，则该实现类必须是抽象类。

4.接口当中可以定义”成员变量“，但是必须使用：public static final关键字
从效果上看，这其实就是接口的【常量】
格式：public static final 数据类型 常量名称 = 数据值；
注意事项：
（1）接口当中的常量，可以省略public static final，省略之后效果相同
（2）接口当中的常量，必须进行赋值，不能不赋值
（3）接口中常量的名称，使用完全大写的字母，用下划线进行分隔。

5.接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract，这两个关键字
修饰符，可以选择性地省略。方法的三要素可以随意定义。

6.默认方法
格式：public default 返回值类型 方法名称（参数列表）{方法体}
作用：（1）常用于解决接口升级的问题  --->（将新添加的方法改为默认方法，已有的实现类不会报错）
          （2）拼接lanbda表达式和函数式编程
注意：（1）接口的默认方法可以被实现类直接调用
          （2）接口的默认方法可被实现类覆盖重写

7.接口中静态方法的定义格式和方法调用与在类中相似，但是不能通过实现类或是实现类的对象来调用静态方法（定义在类中
的静态方法能通过对象来调用）--->因为一个实现类可能对接多个接口，静态方法会产生冲突

8.接口方法的私有化：抽取一个共有方法，用来解决接口中代码的重复问题，但是这个方法不应该让实现类使用，应该是私有化的
（1）普通私有方法：解决多个默认方法之间重复代码问题
格式：private 返回值类型 方法名称（参数列表）{
                    方法体
           }
（2）静态私有方法：解决多个静态方法之间重复代码问题
格式：private static 返回值类型 方法名称（参数列表）{
                    方法体
          }


9.使用接口的一些注意事项：
（1）接口是没有静态代码块和构造方法的。
（2）一个类的直接父类是唯一的，但是一个类可以同时实现多个接口
格式：public class MyIntfaceImpl implements MyInterfaceA,MyInterfaceB{
              //覆盖重写所有抽象方法
}
（3）如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可
（4）如果实现类没有覆盖重写所有接口当中的抽象方法，那么该实现类必须是一个抽象类
（5）如果实现类所实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。
（6）一个类如果直接父类当中的方法，和接口当中的默认方法产生冲突，优先使用父类当中的方法。

10.接口之间的多继承
（1）类与类之间是单继承的，直接父类只有一个
（2）类与接口之间是多实现的，一个类可以实现多个接口
（3）接口与接口之间是多继承的
注意：①多个父接口当中的抽象方法重复不会发生冲突
          ②多个父接口中的默认方法如果重复，那么子接口必须对该默认方法进行覆盖重写，且要带default关键字

11.多态性（对象具有多态性，父类引用指向子类对象）
（1）格式：父类名称 对象名称 = new 子类名称（）；
（2）使用多态写法时，调用成员变量和成员方法的规则
口诀：成员变量：编译看左，运用还看左  ；成员方法：编译看左，运用看右。
（3）意义：在需要调用不同子类的成员方法(覆盖重写父类的)时（等号右边new不同的对象），等号左边的代码都不会变化。


12.对象的向上转型（其实就是多态的写法）：
格式：父类名称 对象名称 = new 子类名称（） 或者  父类名称 对象名称 =  子类名称  （子类对象已创建）
含义：创建一个子类对象，把它当作一个父类对象来看待使用
注意事项：
（1）向上转型一定是安全的，从小范围转移到大范围（类似于自动类型转换）
（2）一旦向上转型为父类，那么就无法调用子类原本特有的内容。--->解决方案：使用对象的向下转型【还原】
（3）在传参时可以自动的发生向上转型。

13.对象的向下转型（其实是一个【还原】动作）：
格式：子类名称 对象名称 = （子类名称）父类对象；
含义：将父类对象【还原】成为本来的子类对象
注意事项：
（1）必须保证对象向下转的类型，就是它创建时的类型。
（2）如果对象向下转的类型不是它创建时的类型，就会报错--->ClassCastException。（类似于强制类型转换）

14.向下转型时，可以使用isstanceof关键字进行类型判断（对象 instanceof 子类名称），返回值类型是一个布尔值。